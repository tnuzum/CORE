** IMPORTS **
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import static org.hamcrest.Matchers.lessThan;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.Matchers.not;
import java.util.concurrent.TimeUnit;

** Convert Raw XML response to String **				
XmlPath js = ReusableMethods.rawToXML(res);	

** ASSERTIONS **

** Response info **
Assert.assertEquals(res.getStatusCode(), 200);
Assert.assertTrue(res.getTime() >= 60L);
.assertThat().statusCode(200)
.time(lessThan(60L),TimeUnit.SECONDS)

** Response Body Validation **
Assert.assertNotNull(js.getDouble("Envelope.Body.GetBillingDeclinesHistoriesResponse.GetBillingDeclinesHistoriesResult.BillingDeclines.BillingDeclinesHistoryDto[0].Amount"));
Assert.assertTrue(js.getString("Result[0].ExpirationDate").contains(expirationMonth));

** Required Field **
Assert.assertNotNull(js.getDouble("Envelope.Body.GetPackageResponse.GetPackageResult.BasePrice"));
Assert.assertNotNull(js.getInt("Envelope.Body.GetPackageResponse.GetPackageResult.DaysUntilExpiration"));
Assert.assertNotNull(js.getString("Envelope.Body.GetPackageResponse.GetPackageResult.ItemBarcodeId"));

** Option Field **
.body("Result", hasKey("MiddleInitial"))

** Exact Value **				
Assert.assertEquals(js.getDouble("Envelope.Body.GetPackageResponse.GetPackageResult.BasePrice"), 15.00);
Assert.assertEquals(js.getInt("Envelope.Body.GetPackageResponse.GetPackageResult.DaysUntilExpiration"), 0);
Assert.assertEquals(js.getString("Envelope.Body.GetPackageResponse.GetPackageResult.ItemBarcodeId"), "paidSV");
.body("Result.Address.AddressLine1", equalTo("7965 N High St"))

** Contains Value **
Assert.assertTrue(js.getString("Result[0].ExpirationDate").contains(expirationMonth));		
.body("Result.Name", anyOf(hasItem("string")))

* Null Value	
Assert.assertNull(js.getString("Result.PendingConfirmationNumber"));		
.body("Result.PrimarySelectableResourceType.Books[0]", nullValue())

** Arrays **
Assert.assertEquals(js.getInt("Envelope.Body.GetPackageDetailsResponse.GetPackageDetailsResult.PriceRangeDtos.PriceRangeDto[0].EndRange"), 5);

** GREATER THAN **
Assert.assertTrue(js.getDouble("Envelope.Body.GetMembersAccountBalancesPastDueResponse.GetMembersAccountBalancesPastDueResult.MemberAccountBalancesPastDue.MemberAccountBalancesPastDueDto[0].Past120") > 0.00);
Assert.assertTrue(js.getInt("Result.AutoApprovedConfirmationNumber") > 0);
Assert.assertTrue(res.getTime() >= 60L);

** Equals To Int **
Assert.assertTrue(js.getInt("Envelope.Body.GetMemberActionsResponse.GetMemberActionsResult.MemberActionDto[0].MemberActionId") == 1); 


	
