** IMPORTS **
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import static org.hamcrest.Matchers.lessThan;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.Matchers.not;
import java.util.concurrent.TimeUnit;

** ASSERTIONS **

** Convert Raw XML response to String **				
XmlPath js = ReusableMethods.rawToXML(res);	

** Response info **

Assert.assertEquals(res.getStatusCode(), 200);
Assert.assertTrue(res.getTime() >= 60L);

** Value is not Null **
Assert.assertNotNull(js.getDouble("Envelope.Body.GetPackageResponse.GetPackageResult.BasePrice"));
Assert.assertNotNull(js.getInt("Envelope.Body.GetPackageResponse.GetPackageResult.DaysUntilExpiration"));
Assert.assertNotNull(js.getString("Envelope.Body.GetPackageResponse.GetPackageResult.ItemBarcodeId"));

** Exact Values **				
Assert.assertEquals(js.getDouble("Envelope.Body.GetPackageResponse.GetPackageResult.BasePrice"), 15.00);
Assert.assertEquals(js.getInt("Envelope.Body.GetPackageResponse.GetPackageResult.DaysUntilExpiration"), 0);
Assert.assertEquals(js.getString("Envelope.Body.GetPackageResponse.GetPackageResult.ItemBarcodeId"), "paidSV");

** Arrays **
Assert.assertEquals(js.getInt("Envelope.Body.GetPackageDetailsResponse.GetPackageDetailsResult.PriceRangeDtos.PriceRangeDto[0].EndRange"), 5);
Assert.assertEquals(js.getDouble("Envelope.Body.GetPackageDetailsResponse.GetPackageDetailsResult.PriceRangeDtos.PriceRangeDto[0].PricePerUnit"), 15.00);
Assert.assertEquals(js.getInt("Envelope.Body.GetPackageDetailsResponse.GetPackageDetailsResult.PriceRangeDtos.PriceRangeDto[0].StartRange"), 1);
Assert.assertEquals(js.getInt("Envelope.Body.GetPackageDetailsResponse.GetPackageDetailsResult.PriceRangeDtos.PriceRangeDto[1].EndRange"), 10);
Assert.assertEquals(js.getDouble("Envelope.Body.GetPackageDetailsResponse.GetPackageDetailsResult.PriceRangeDtos.PriceRangeDto[1].PricePerUnit"), 10.00);
Assert.assertEquals(js.getInt("Envelope.Body.GetPackageDetailsResponse.GetPackageDetailsResult.PriceRangeDtos.PriceRangeDto[1].StartRange"), 6);


Assert.assertNotNull(js.getString("Result[0].PackagePaymentConfiguration.PunchesRequired"));
				
Assert.assertTrue(js.getString("Result[0]").contains("SubstituteInstructor"));
				
Assert.assertEquals(js.getString("Result[0].EnrollmentEligibilities[0].CustomerId"), customerId);

** GREATER THAN **
Assert.assertTrue(js.getDouble("Envelope.Body.GetMembersAccountBalancesPastDueResponse.GetMembersAccountBalancesPastDueResult.MemberAccountBalancesPastDue.MemberAccountBalancesPastDueDto[0].Past120") > 0.00);


	
