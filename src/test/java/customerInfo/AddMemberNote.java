package customerInfo;

import static io.restassured.RestAssured.given;

import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.path.xml.XmlPath;
import io.restassured.response.Response;
import payloads.CustomerInfoPL;
import resources.ReusableMethods;
import resources.base;

public class AddMemberNote extends base {
	
	static String companyId;
	static String actionId;
	static String alertOnCheckIn;
	static String clubId;
	static String customerId;
	static String doNotDisplayInFrontDesk;
	static String employeeId;
	static String note;
	
	@BeforeTest
	public void getData(){
		base.getPropertyData();
		RestAssured.baseURI = prop.getProperty("baseURI");
		
		companyId = prop.getProperty("X-CompanyId");
		 actionId = "1";
		 alertOnCheckIn ="false";
		 clubId = prop.getProperty("club1Id");
		 customerId = prop.getProperty("changeMemberId");
		 doNotDisplayInFrontDesk = "false";
		 employeeId = prop.getProperty("activeEmployeeId");
		 note = "This is a test note generated by an automated test script";
	}
	
	@Test (testName="Member Note added", description = "PBI: 165462")
	public void memberNoteAdded(){
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//             	.log().all()
	            .statusCode(200)
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       
				Assert.assertTrue(js.getInt("Envelope.Body.AddMemberNoteResponse.AddMemberNoteResult") > 0);
	}
	
	@Test (testName="Note Alert On Checkin", description = "PBI: 165462")
	public void noteAlertOnCheckin(){
		
			String alertOnCheckIn = "true";
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(200)
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       
				Assert.assertTrue(js.getInt("Envelope.Body.AddMemberNoteResponse.AddMemberNoteResult") > 0);
	}
	
	@Test (testName="Note Do Not Display In Front Desk", description = "PBI: 165462")
	public void doNotDisplayInFrontDesk(){
		
			String doNotDisplayInFrontDesk = "true";
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(200)
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       
				Assert.assertTrue(js.getInt("Envelope.Body.AddMemberNoteResponse.AddMemberNoteResult") > 0);
	}
	
	@Test (testName="Action Not Found", description = "PBI: 165462")
	public void actionNotFound(){
		
			String actionId = "99999";
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(400)
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       		Assert.assertEquals(js.getString("Envelope.Body.Fault.faultcode"), "s:Client");
				Assert.assertEquals(js.getString("Envelope.Body.Fault.detail.InvalidInputFaultDto.Message"), "ActionId '"+actionId+"' does not exist");
	}
	
	@Test (testName="Action Null", description = "PBI: 165462")
	public void actionNull(){
		
			String actionId = prop.getProperty("NOF");
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(500)
	            .statusLine("HTTP/1.1 500 Internal Server Error")
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       		Assert.assertEquals(js.getString("Envelope.Body.Fault.faultcode"), "s:Client");
				Assert.assertTrue(js.getString("Envelope.Body.Fault.detail.InternalServerErrorFaultDto.Message").contains("The value 'null' cannot be parsed"));
	}
	
	@Test (testName="Alert On CheckIn Null", description = "PBI: 165462")
	public void alertOnCheckInNull(){
		
			String alertOnCheckIn = prop.getProperty("NOF");
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(500)
	            .statusLine("HTTP/1.1 500 Internal Server Error")
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       		Assert.assertEquals(js.getString("Envelope.Body.Fault.faultcode"), "s:Client");
				Assert.assertTrue(js.getString("Envelope.Body.Fault.detail.InternalServerErrorFaultDto.Message").contains("The value 'null' cannot be parsed"));
	}
	
	@Test (testName="Customer Null", description = "PBI: 165462")
	public void customerNull(){
		
			String customerId = prop.getProperty("NOF");
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(500)
	            .statusLine("HTTP/1.1 500 Internal Server Error")
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       		Assert.assertEquals(js.getString("Envelope.Body.Fault.faultcode"), "s:Client");
				Assert.assertTrue(js.getString("Envelope.Body.Fault.detail.InternalServerErrorFaultDto.Message").contains("The value 'null' cannot be parsed"));
	}
	
	@Test (testName="Do Not Display In Front Desk Null", description = "PBI: 165462")
	public void doNotDisplayInFrontDeskNull(){
		
			String doNotDisplayInFrontDesk = prop.getProperty("NOF");
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(500)
	            .statusLine("HTTP/1.1 500 Internal Server Error")
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       		Assert.assertEquals(js.getString("Envelope.Body.Fault.faultcode"), "s:Client");
				Assert.assertTrue(js.getString("Envelope.Body.Fault.detail.InternalServerErrorFaultDto.Message").contains("The value 'null' cannot be parsed"));
	}
	
	@Test (testName="Employee Not Found", description = "PBI: 165462")
	public void employeeNotFound(){
		
			String employeeId = "99999";
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(400)
	            .statusLine("HTTP/1.1 400 Bad Request")
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       		Assert.assertEquals(js.getString("Envelope.Body.Fault.faultcode"), "s:Client");
				Assert.assertTrue(js.getString("Envelope.Body.Fault.detail.InvalidInputFaultDto.Message").contains("EmployeeId '"+employeeId+"' does not exist"));		
	}
	
	@Test (testName="Employee Null", description = "PBI: 165462")
	public void employeeNull(){
		
			String employeeId = prop.getProperty("NOF");
		
	       Response res =  given()
//	    		.log().all()
                .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
                .and()
                .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
	         .when()
	            .post("/Info/CustomerInfo.svc")
	         .then()
//            	.log().all()
	            .statusCode(500)
	            .statusLine("HTTP/1.1 500 Internal Server Error")
	            .extract().response();
	       
	       		XmlPath js = ReusableMethods.rawToXML(res);
	       		
	       		Assert.assertTrue(res.getTime() >= 60L);
	       		Assert.assertEquals(js.getString("Envelope.Body.Fault.faultcode"), "s:Client");
				Assert.assertTrue(js.getString("Envelope.Body.Fault.detail.InternalServerErrorFaultDto.Message").contains("The value 'null' cannot be parsed"));		
	}
	
	@Test (testName="Note Empty", description = "PBI: 165462")
	public void noteEmpty(){
		
		String note ="";
	
       Response res =  given()
//    		.log().all()
            .headers("SOAPAction", "http://tempuri.org/ICustomerInfo/AddMemberNote","Content-Type", "text/xml; charset=utf-8")
            .and()
            .body(CustomerInfoPL.addMemberNote(companyId, actionId, alertOnCheckIn, clubId, customerId, doNotDisplayInFrontDesk, employeeId, note))
         .when()
            .post("/Info/CustomerInfo.svc")
         .then()
//        	.log().all()
            .statusCode(400)
            .statusLine("HTTP/1.1 400 Bad Request")
            .extract().response();
       
       		XmlPath js = ReusableMethods.rawToXML(res);
       		
       		Assert.assertTrue(res.getTime() >= 60L);
       		Assert.assertEquals(js.getString("Envelope.Body.Fault.faultcode"), "s:Client");
			Assert.assertTrue(js.getString("Envelope.Body.Fault.detail.InvalidInputFaultDto.Message").contains("Note text cannot be empty"));		
}
	
}
